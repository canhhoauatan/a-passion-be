generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           Int          @id @default(autoincrement())
  name         String
  email        String        @unique
  password     String
  role         String        @default("STUDENT")
  settings     UserSettings? 
  settingsId   Int?          @unique
  courses      Enrollment[]  
  reviews      Review[]
  progress     Progress[]    
  purchases    Purchase[]    
  createdTests Test[] @relation("TestCreator")
  tests        Test[] @relation("TestParticipants")
  blogs        Blog[] @relation("BlogAuthor")
  createdCourses Course[]    @relation("CreatedCourses") 
  taughtCourses Course[]     @relation("TaughtCourses")  
  createdAt    DateTime      @default(now())
  updatedAt    DateTime?      @updatedAt
}

model UserSettings {
  id             Int        @id @default(autoincrement())
  phone          String?
  language       String     @default("en")
  notifications  String     // Lưu chuỗi JSON
  learningGoals  Int        // minutes per day
  theme          String     @default("light")
  userId         Int        @unique
  user           User       @relation(fields: [userId], references: [id])
}


model Course {
  id           Int           @id @default(autoincrement())
  title        String         
  description  String
  objectives   String         @default("")// Mục tiêu khóa học
  price        Int
  newPrice     Int?
  thumbnail    String?
  category     Category       @relation(fields: [categoryId], references: [id])
  categoryId   Int            @default(1)
  lessons      Lesson[]
  reviews      Review[]
  enrollments  Enrollment[]
  purchases Purchase[]
  creator      User           @relation("CreatedCourses", fields: [creatorId], references: [id])
  creatorId    Int            @default(30) // Người tạo khóa học
  teacher      User?           @relation("TaughtCourses", fields: [teacherId], references: [id])
  teacherId    Int?           // Người dạy khóa học (có thể khác creator)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime?       @updatedAt
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  parentId Int?       // Danh mục cha
  parent   Category?  @relation("SubCategories", fields: [parentId], references: [id]) // Trường đối lập
  children Category[] @relation("SubCategories") // Các danh mục con
  courses  Course[]   // Khóa học trong danh mục
}

model Lesson {
  id         Int      @id @default(autoincrement())
  title      String
  content    String?   // Nội dung bài học (Markdown hoặc HTML)
  videoUrl   String?   // Link video (YouTube)
  course     Course    @relation(fields: [courseId], references: [id])
  courseId   Int
  progresses Progress[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Enrollment {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  course     Course   @relation(fields: [courseId], references: [id])
  courseId   Int
  progress   Progress[]
  enrolledAt DateTime @default(now())
}

model Review {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  course     Course   @relation(fields: [courseId], references: [id])
  courseId   Int
  rating     Int      // Đánh giá từ 1 đến 5
  comment    String?
  createdAt  DateTime @default(now())
}

model Progress {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  lesson     Lesson   @relation(fields: [lessonId], references: [id])
  lessonId   Int
  enrollment Enrollment @relation(fields: [enrollmentId], references: [id])
  enrollmentId Int
  status     String   // "incomplete", "complete"
  completedAt DateTime?
}

model Purchase {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  course     Course   @relation(fields: [courseId], references: [id])
  courseId   Int
  amount     Int
  purchasedAt DateTime @default(now())
}

//enum Role {
 // ADMIN
 // TEACHER
 // STUDENT
//}


model Test {
  id           Int        @id @default(autoincrement())
  title        String
  description  String
  questions    Question[] // Danh sách câu hỏi trong bài kiểm tra
  creator      User       @relation("TestCreator", fields: [creatorId], references: [id]) // Người tạo bài kiểm tra
  creatorId    Int
  participants User[]     @relation("TestParticipants") // Người tham gia bài kiểm tra
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Question {
  id        Int    @id @default(autoincrement())
  content   String // Nội dung câu hỏi
  options   String // Các đáp án, lưu dưới dạng JSON
  answer    String // Đáp án đúng
  test      Test   @relation(fields: [testId], references: [id]) // Thuộc bài kiểm tra nào
  testId    Int
}

model Blog {
  id          Int      @id @default(autoincrement())
  title       String
  content     String
  author      User     @relation("BlogAuthor", fields: [authorId], references: [id]) // Người viết blog
  authorId    Int
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
}
