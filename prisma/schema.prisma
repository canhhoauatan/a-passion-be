generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             Int           @id @default(autoincrement())
  name           String
  email          String        @unique
  password       String
  roleId         Int
  settingsId     Int?          @unique
  createdAt      DateTime      @default(now())
  updatedAt      DateTime?     @updatedAt
  blogs          Blog[]        @relation("BlogAuthor")
  taughtCourses  Course[]      @relation("TaughtCourses")
  createdCourses Course[]      @relation("CreatedCourses")
  courses        Enrollment[]
  progress       Progress[]
  purchases      Purchase[]
  reviews        Review[]
  createdTests   Test[]        @relation("TestCreator")
  role           Role          @relation(fields: [roleId], references: [id])
  settings       UserSettings?
  tests          Test[]        @relation("TestParticipants")
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

model UserSettings {
  id            Int     @id @default(autoincrement())
  phone         String?
  language      String  @default("en")
  notifications String
  learningGoals Int
  theme         String  @default("light")
  userId        Int     @unique
  user          User    @relation(fields: [userId], references: [id])
}

model Course {
  id          Int          @id @default(autoincrement())
  title       String
  description String
  objectives  String       @default("")
  price       Int
  newPrice    Int?
  thumbnail   String?
  categoryId  Int          @default(1)
  creatorId   Int          @default(30)
  teacherId   Int?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime?    @updatedAt
  teacher     User?        @relation("TaughtCourses", fields: [teacherId], references: [id])
  creator     User         @relation("CreatedCourses", fields: [creatorId], references: [id])
  category    Category     @relation(fields: [categoryId], references: [id])
  enrollments Enrollment[]
  lessons     Lesson[]
  purchases   Purchase[]
  reviews     Review[]
}

model Category {
  id       Int        @id @default(autoincrement())
  name     String
  parentId Int?
  parent   Category?  @relation("SubCategories", fields: [parentId], references: [id])
  children Category[] @relation("SubCategories")
  courses  Course[]
}

model Lesson {
  id         Int        @id @default(autoincrement())
  title      String
  content    String?
  videoUrl   String?
  courseId   Int
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  course     Course     @relation(fields: [courseId], references: [id])
  progresses Progress[]
}

model Enrollment {
  id         Int        @id @default(autoincrement())
  userId     Int
  courseId   Int
  enrolledAt DateTime   @default(now())
  course     Course     @relation(fields: [courseId], references: [id])
  user       User       @relation(fields: [userId], references: [id])
  progress   Progress[]
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  courseId  Int
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  course    Course   @relation(fields: [courseId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Progress {
  id           Int        @id @default(autoincrement())
  userId       Int
  lessonId     Int
  enrollmentId Int
  status       String
  completedAt  DateTime?
  enrollment   Enrollment @relation(fields: [enrollmentId], references: [id])
  lesson       Lesson     @relation(fields: [lessonId], references: [id])
  user         User       @relation(fields: [userId], references: [id])
}

model Purchase {
  id          Int      @id @default(autoincrement())
  userId      Int
  courseId    Int
  amount      Int
  purchasedAt DateTime @default(now())
  course      Course   @relation(fields: [courseId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}

model Test {
  id           Int        @id @default(autoincrement())
  title        String
  description  String
  creatorId    Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  questions    Question[]
  creator      User       @relation("TestCreator", fields: [creatorId], references: [id])
  participants User[]     @relation("TestParticipants")
}

model Question {
  id      Int    @id @default(autoincrement())
  content String
  options String
  answer  String
  testId  Int
  test    Test   @relation(fields: [testId], references: [id])
}

model Blog {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  authorId  Int
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  author    User     @relation("BlogAuthor", fields: [authorId], references: [id])
}
